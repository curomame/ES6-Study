HTML 에서 JS파일을 불러오기 위해 보통 js를 import 해온다.
정확히는 script src="위치"로 js파일을 불러온다.

HTML에서 파일을 분석할때 기본적으로 작성된 순서대로 코드를 파싱해오며
기본적인 순서로는
HTML => Blocked(fetch => 실행) => 다시 HTML 파싱
으로 진행된다

그렇기 때문에 js파일을 어디서 어떻게 데려오느냐에 따라 이 파일을 읽는 순서
그리고 결과값이 달라지는 현상이 초래된다.


1) 헤드 부분에 js명시

헤더 밑 부분에 정확히는 meta아랫 부분에 js파일을 불러오면
위와 같은 순서로 HTML 파싱이 진행된다

그렇게 됐을 때, js의 파일 사이즈가 크다면 그 내용을 받아오는데 시간이 오래걸리니까
사용자가 페이지를 기다리는 시간이 길어진다.


2) 바디 아랫부분에 명시

그렇기 때문에 body 아랫부분에 스크립트를 넣는 경우도 발생하는데,
이렇게 되면 위에있는 HTML문서들을 먼저 읽어 낸 후
나중에 js 파일을 읽기 때문에 페이지를 빠르게 표현해 낼 수 있다.

하지만 js파일에 의미가 많이 부여되어있다면
전체적인 페이지를 보기에는 사용자 입장에서 똑같이 시간이 오래 걸릴 수 있다


3) 헤드 부분에 async src 로 js 불러오기

async는 js를 비동기로 처리하도록 도와주는 친구임
원래는 위에서 말한대로 순서대로 파일을 읽어내지만
이 파일을 읽어내는 엔진이 async를 너무 사랑하기 때문에
이 친구와의 시간을 충분히 즐긴 다음 다른 일을 하게됨

그렇기 때문에 만약 첫 부분에 async src가 있다면
이 부분을 먼저 해석하고 이후 html을 파싱함

장점이나 단점은 조금만 생각해보면 알겠지만
DOM에서의 문제가 제일 큼

4) 헤드 부분에 defer src 로 js 불러오기

defer는 얼마전에 다시 우리밋의 강의를 들으면서 나왔던 내용이였는데
그때는 그냥 넘어갔는데 이번에야 이해를 하게 됨

위에 이제 엔진이 async를 너무 사랑하는거면
defer는 음... 약간 절친정도임

그래서 만나면 반갑고 좋지만
언제든 만날수 있는 친구고 나중에 보면 되니까
우선은 간단한 인사정도만 하고 넘어간다고 보면 될라나?

그렇기 때문에 만약 defer를 만나게 된다면
우선은 그 js파일을 다운받으면서 아래에 있는 코드 작업들을 진행하게됨

그리고 난후 한꺼번에 다시 친구들과 만나서 대화를 하듯
이 js의 실행을 진행하게 됨


이렇게만 보면 defer가 제일 좋아보이는데
뭐 당연한거겠지만 뭐든 상황에 따라 하는 것이 좋다는 것!이 오늘의 공부내용
